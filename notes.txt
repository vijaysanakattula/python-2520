16th Sep 2025
-------------

-> Nested COnditionals : Conditionals inside Conditionals
-> Nested Loops : Loops inside Loop


-> Branching Statements (Jump Statements)
    -> break : helps you exit loops
    -> Continue : helps you skip the current iteration in loop
    -> pass : acts as a placeholder, for doing nothing

    18th Sep 2025
    ---------------
-> Student Grade Tracker Solution
-> String Formatting
-> String Concatenation
-> String Repitition
-> String Immutability 
-> String Methods
    -> String class(datatype) provides various methods


20th Sep 2025
--------------
-> Simple data types
    -> Can hold one value 
    -> data = 10 

-> Complex Data types 
    -> Can hold multiple values
    -> data = [10,20,30,40,50]

-> In python (part of standard library), we use follwoing classes to work with complex data types
    -> List
    -> Tuple 
    -> Dictionary 
    -> Set 

1. List:
    -> List is a data structure which allows you to store multiple values in a single variable 
    -> Lists are represented using [] or use list class ==> list()
    -> Accessing the data in Lists 
        -> Like in Strings, we have index which starts from 0
        -> Use index number to access individual elements
        -> Both positive and negative indexing
        -> Indexing is same as Strings 
        -> Slicing is same as strings 

    -> Looping
    -> Operators 
    -> Conditionals 
    -> Duplicates allowed 
    -> List Methods / Operations 


22nd SEP 2025
=============
-> List Methods Continued..

-> Lsist Characteristics 
    -> order: Lists is ordered (inserion order is preserved)
    -> Mutable : Lists can be modified (append,clear)
    -> Duplicates : Allowed 
    -> Can we hold different data types : Yes 

2. Tuples:
    -> Tuples is a data structure which allows you to store multiple values in a single variable 
    -> Tuples are represented using () or use list class ==> list()
    -> Accessing the data in Tuples 
        -> Like in Strings, we have index which starts from 0
        -> Use index number to access individual elements
        -> Both positive and negative indexing
        -> Indexing is same as Strings 
        -> Slicing is same as strings 
        -> Tuples are Immutable 

    -> Looping
    -> Operators 
    -> Conditionals 
    -> Duplicates allowed 
    -> Tuples Methods / Operations 


23rd SEP 2025
==========
-> Dictionary (Mapping Type of Data)
-> Dictionary is a data structure which allows you to multiplekey, values in a single 
    -> key, value -> pair / item 
        key:value,key:value
    -> dictionaries are represented using { } or use tuple class ==> dict()
-> There is no index in dictionaries
-> NO Indexing
-> No Slicing 
-> Rule 
    -> keys cannot be duplicate (it will override the data)
    -> keys should be Immutable objects only (95% or above keys will be strings)
    -> values can be duplicates 
    -> values can be any object 

-> In dictionaries, we use key to access data/values not index 

24th SEP 2025
===================

-> Sets is a data structure which allows you to store multiple values in a single variable 
-> Sets are represented using { } or use set class ==> set()
    -> dict : {1:100,2:200,3:300}
    -> Set : {100,200,300}

-> Accessing the data in Sets 
    -> Sets doesn't support index 
    -> NO Indexing
    -> NO SLICING 

-> Sets are UUU
    -> U - Unordered (No order - No index)
    -> U - Unique (No Duplicates, if we add forcefully, will be removed)
    -> U - Unindex 

-> Sets are specially used when we want to perform  math operaions of Sets
    -> Union
    -> Intersection 
    -> Difference 
    -> etc

-> Frozenset : immutable set 

-> Set Characteristics
    -> Order : Sets are Unordered (inserion order is preserved)
    -> Mutable : Sets can be modified (append,clear)
    -> Duplicates : Not Allowed 
    -> Can we hold different data types : Yes 

-> Building Applications ?
    -> List (Seq of values, mutable) {in which context}
    -> Tuple (") (immutable)
    -> Dictionary (mapping Types) {in which context}
    -> Set (Unique data) {in which context}

-> Databases (CRUD) : Database point of view 

25th SEP 2025
==============
-> Application Requirement
    -> Student Management System (Product/ EMployee etc)
        -> C - Create (Student/Product/Employee etc)
        -> R - Read (Student/Product/Employee etc)
        -> U - Update (Student/Product/Employee etc)
        -> D - Delete (Student/Product/Employee etc)
    -> As of now, Its a console based application 
    -> In future, you can turn this into Web Application (Django + Database)

26th SEP 2025
=============

-> Student Management System (Product/ EMployee etc) Continued

-> Similar to Student Management System, create a Product Management system which is a sub service of Ecommerce System

29th SEP 2025
=============
-> Arbitrary Positional Arguements(*args) - (only values)
    -> Allows you to accept any number of Positional Arguements
    -> Used when you don't know how mnay arguements a fucntion might receive 

-> Arbitrary Keywords Arguements (**kwargs) - (key values)
    -> Allows you to accept any number of Keyword Arguements
    -> Used when you don't know how mnay arguements a fucntion might receive  
    -> All the arguements we pass will be captured in a Dictionary

-> "return" is a keyword in python, used in functions to give appropriate response, when a function is called 
    -> When you don't use return, by default a function return None 
    -> If we use return, make sure it is the last statement to be executed 
    -> If we have multiple returns sequentially, first will be considered 
    -> If multiple returns are present, and used with control structure, you can control the flow 

-> Function Composition 
    -> Function calling another function is called Function Composition, for Reusuability 

-> Scope of Variables inside Fucntions 
    -> Scope : Inside the code, where you can access a variable depends upon the Scope 
        -> Local Scope 
        -> Global Scope 
    
    -> Local Scope 
        -> A Local variable is declared inside the function 
        -> Its lofetime exists only within the function, while the function runs
        -> so we cannot use them outside the function 
        -> NOTE : Parameters we are passing to the functions, are local variables 


30th SEP 2025
=============
-> Fucntion Types in Python 
    -> Built in functions 

    -> User Defined functions

    -> Lambda functions (Anonymous functions)
        -> A Lambda function is a small, one line function with no names i.e Anonymous 
        -> NOTE: Used ONLY FOR ONE LINE EXPRESSIONS 
        -> We use "Lambda" keyword to work with Lambda functions 
        -> In Lambda functions, result of EXPRESSION is automatically returned 
        -> NOTE: used for simple and quick tasks, especially when passing a function as a parameter 
        -> One Liner Functions also called IILE = Immediately Invoked Lambda Expression 

        -> Syntax 
            
            lambda arguments: expression 

                -> arguments can be multiple, but expression is one line only 


    -> This lambda expressions will be attached with higher functions 
    -> Higher order Functions 
        -> map, filter and reduce 


6th OCT 2025
============
-> CRUD App using functional style 
-> Modules 
    -> A Module is a simple Python file which contains python definitions 
        -> Variables 
        -> Statements 
        -> Functions 
        -> Classes 
        -> etc 
    -> Modules allows you to reuse code instaed of rewriting 
-> Types of Modules 
    -> Inbuilt Modules 
        -> Provided as part of standard python library
    -> User defined Modules 
        -> Created by user itself 
    -> External Modules 
        -> Provided third pary vendors
        -> https://pypi.org/
        -> pip = python package manager 
        -> pip install pandas (win)
        -> pip3 install pandas (mac)
    -> Syntax
        import module (import whole module and all functionalities)
        from module import specific_functionality (import only specific Functionalities) (recommended)

7th Oct 2025
============

-> User defined Modules
    -> Just writing a Python file 
    -> He wants some math functions and also some user profile related info as well 

-> External Modules 
    -> Rather than developing, we use them 
        -> pip install pandas (win)
        -> pip3 install pandas (mac)
    -> You are working with some API (provided by some external service provider)

10th Oct 2025
=============
-> Working with JSON files (Dictionary like data)

-> JSON (JavaScript Object Notation) is a human-readable, text-based format 
for storing and exchanging data that is widely used for 
web applications, APIs, and configuration files. 

-> It represents data as key-value pairs within objects 
-> (enclosed in curly braces {}) - Same as Dictionary in Python 

-> Very commonly used in Application development (API's)
-> We have "json" module built in python standard library

-> json Operations
    -> dump -> as a file we can store data accepts data and filename 
    -> load -> from a json file we can read data 
    -> dumps -> object based writing 
    -> loads -> object based reading 


