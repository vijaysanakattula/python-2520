16th Sep 2025
-------------

-> Nested COnditionals : Conditionals inside Conditionals
-> Nested Loops : Loops inside Loop


-> Branching Statements (Jump Statements)
    -> break : helps you exit loops
    -> Continue : helps you skip the current iteration in loop
    -> pass : acts as a placeholder, for doing nothing

    18th Sep 2025
    ---------------
-> Student Grade Tracker Solution
-> String Formatting
-> String Concatenation
-> String Repitition
-> String Immutability 
-> String Methods
    -> String class(datatype) provides various methods


20th Sep 2025
--------------
-> Simple data types
    -> Can hold one value 
    -> data = 10 

-> Complex Data types 
    -> Can hold multiple values
    -> data = [10,20,30,40,50]

-> In python (part of standard library), we use follwoing classes to work with complex data types
    -> List
    -> Tuple 
    -> Dictionary 
    -> Set 

1. List:
    -> List is a data structure which allows you to store multiple values in a single variable 
    -> Lists are represented using [] or use list class ==> list()
    -> Accessing the data in Lists 
        -> Like in Strings, we have index which starts from 0
        -> Use index number to access individual elements
        -> Both positive and negative indexing
        -> Indexing is same as Strings 
        -> Slicing is same as strings 

    -> Looping
    -> Operators 
    -> Conditionals 
    -> Duplicates allowed 
    -> List Methods / Operations 


22nd SEP 2025
=============
-> List Methods Continued..

-> Lsist Characteristics 
    -> order: Lists is ordered (inserion order is preserved)
    -> Mutable : Lists can be modified (append,clear)
    -> Duplicates : Allowed 
    -> Can we hold different data types : Yes 

2. Tuples:
    -> Tuples is a data structure which allows you to store multiple values in a single variable 
    -> Tuples are represented using () or use list class ==> list()
    -> Accessing the data in Tuples 
        -> Like in Strings, we have index which starts from 0
        -> Use index number to access individual elements
        -> Both positive and negative indexing
        -> Indexing is same as Strings 
        -> Slicing is same as strings 
        -> Tuples are Immutable 

    -> Looping
    -> Operators 
    -> Conditionals 
    -> Duplicates allowed 
    -> Tuples Methods / Operations 


23rd SEP 2025
==========
-> Dictionary (Mapping Type of Data)
-> Dictionary is a data structure which allows you to multiplekey, values in a single 
    -> key, value -> pair / item 
        key:value,key:value
    -> dictionaries are represented using { } or use tuple class ==> dict()
-> There is no index in dictionaries
-> NO Indexing
-> No Slicing 
-> Rule 
    -> keys cannot be duplicate (it will override the data)
    -> keys should be Immutable objects only (95% or above keys will be strings)
    -> values can be duplicates 
    -> values can be any object 

-> In dictionaries, we use key to access data/values not index 

24th SEP 2025
===================

-> Sets is a data structure which allows you to store multiple values in a single variable 
-> Sets are represented using { } or use set class ==> set()
    -> dict : {1:100,2:200,3:300}
    -> Set : {100,200,300}

-> Accessing the data in Sets 
    -> Sets doesn't support index 
    -> NO Indexing
    -> NO SLICING 

-> Sets are UUU
    -> U - Unordered (No order - No index)
    -> U - Unique (No Duplicates, if we add forcefully, will be removed)
    -> U - Unindex 

-> Sets are specially used when we want to perform  math operaions of Sets
    -> Union
    -> Intersection 
    -> Difference 
    -> etc

-> Frozenset : immutable set 

-> Set Characteristics
    -> Order : Sets are Unordered (inserion order is preserved)
    -> Mutable : Sets can be modified (append,clear)
    -> Duplicates : Not Allowed 
    -> Can we hold different data types : Yes 

-> Building Applications ?
    -> List (Seq of values, mutable) {in which context}
    -> Tuple (") (immutable)
    -> Dictionary (mapping Types) {in which context}
    -> Set (Unique data) {in which context}

-> Databases (CRUD) : Database point of view 

